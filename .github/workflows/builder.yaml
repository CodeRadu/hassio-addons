name: Builder

env:
  BUILD_ARGS: ''
  MONITORED_FILES: 'build.yaml config.yaml Dockerfile rootfs config.json'
  CAS_API_KEY: ${{ secrets.CAS_TOKEN }}

on:
  push:

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3.0.2

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "::set-output name=changed::true";
            echo "::set-output name=addons::[$changed]";
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi
  build:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
        arch: ['aarch64', 'amd64', 'armhf', 'armv7', 'i386']

    steps:
      - name: Check out repository
        uses: actions/checkout@v3.0.2

      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: './${{ matrix.addon }}'

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "::set-output name=build_arch::true";
             echo "::set-output name=image::$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)";
             if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                 echo "BUILD_ARGS=" >> $GITHUB_ENV;
             fi
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
             echo "::set-output name=build_arch::false";
          fi
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v2.0.0
      - name: 🏗 Set up Codenotary Community Attestation Service (CAS)
        uses: frenck/action-setup-cas@v0.1.0
      - name: Set env to staging
        if: endsWith(github.ref, '/dev')
        run: |
          echo "BUILD_ARGS=--test" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Replace {arch} with ${{ matrix.arch }}
        run: |
          original=${{ steps.check.outputs.image }}
          img=$(echo "${original//\{arch\}/${{ matrix.arch }}}")
          echo "IMAGE=${img,,}" >> $GITHUB_ENV
          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Build ${{ matrix.addon }} add-on for ${{ matrix.arch }}
        if: steps.check.outputs.build_arch == 'true'
        uses: docker/build-push-action@v3.1.1
        with:
          load: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE }}
          context: ./${{ matrix.addon }}
          file: ./${{ matrix.addon }}/Dockerfile
          platforms: ${{ matrix.arch }}
          build-args: |
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_REPOSITORY=${{ github.repository }}
      - name: Notarize image
        if: env.CAS_API_KEY != 'null' && steps.check.outputs.build_arch == 'true'
        run: |
          if ! cas authenticate \
            --signerID ${{ secrets.CAS_SIGNER_ID }} \
            "docker://ghcr.io/${{ github.repository_owner }}/${{ steps.check.outputs.image }}";
          then
            cas notarize \
              --api-key=env.CAS_API_KEY \
              --name ${{ steps.check.outputs.image }} \
              "docker://ghcr.io/${{ github.repository_owner }}/${{ steps.check.outputs.image }}"
          fi
      - name: Push
        if: env.BUILD_ARGS != '--test' && steps.check.outputs.build_arch == 'true'
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ steps.check.outputs.image }}
      # - name: Build ${{ matrix.addon }} add-on
      #   if: steps.check.outputs.build_arch == 'true'
      #   uses: home-assistant/builder@2022.07.0
      #   with:
      #     args: |
      #       ${{ env.BUILD_ARGS }} \
      #       --${{ matrix.arch }} \
      #       --target /data/${{ matrix.addon }} \
      #       --image "${{ steps.check.outputs.image }}" \
      #       --docker-hub "ghcr.io/${{ github.repository_owner }}" \
      #       --addon
      #   env:
      #     CAS_API_KEY: ${{ secrets.CAS_TOKEN }}
